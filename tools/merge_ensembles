#!/usr/bin/env python3

# ------------------------------------------------------------------------
# Copyright (c) 2021,
# National Technology & Engineering Solutions of Sandia, LLC (NTESS).
#
# Under the terms of Contract DE-NA0003525 with NTESS, the U.S. Government
# retains certain rights in this software.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
# 1. Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#
# 2. Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
#
# 3. Neither the name of the Sandia Corporation nor the names of the
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY SANDIA CORPORATION "AS IS" AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL SANDIA CORPORATION OR THE
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
# ------------------------------------------------------------------------

# This script takes a list of Skywalker ensembles (Python output modules)  and
# merges them into a single ensemble, generating two corresponding files:
#
# 1. merged.py - A Python module that contains the settings, inputs, and outputs
#    found in all of the input .py files, enumerated in the order in which they
#    appear on the command line.
# 2. merged.yaml - A YAML input file defining the merged ensemble. This file
#    can be run by Skywalker to generate output that can be compared with
#    merged.py.

import os.path, sys

def usage():
    print('''%s: Merges a set of Skywalker output ensembles (.py files),
producing single input (merged.yaml) and output (merged.py) files describing the
merged ensemble.'''%sys.argv[0])
    print('Usage: %s <ensemble1.py> <ensemble2.py> [... [ensembleN.py]]'%sys.argv[0])

class Diff:
    """Diff: an object that tracks differences in the names of fields for two
Python objects."""
    def __init__(self, obj1_name, obj1, obj2_name, obj2):
        if not isinstance(obj1_name, str):
            raise TypeError('obj1_name must be a string!')
        if not isinstance(obj2_name, str):
            raise TypeError('obj2_name must be a string!')
        self.obj1_name = obj1_name
        self.obj2_name = obj2_name
        obj1_fields = dir(obj1)
        obj2_fields = dir(obj2)
        self.fields_in_obj1_but_not_obj2 = \
            [name for name in obj1_fields if name not in obj2_fields]
        self.fields_in_obj2_but_not_obj1 = \
            [name for name in obj2_fields if name not in obj1_fields]
    def empty(self):
        return len(self.fields_in_obj1_but_not_obj2) == 0 and \
               len(self.fields_in_obj2_but_not_obj1) == 0
    def __str__(self):
        if self.empty():
            return '%s and %s are structurally identical'%(self.obj1_name, self.obj2_name)
        s = ''
        if len(self.fields_in_obj1_but_not_obj2) > 0:
            s += 'The following fields appear in %s but not %s:\n'%(self.obj1_name, self.obj2_name)
            for f in self.fields_in_obj1_but_not_obj2:
                s += '  %s\n'%f
        if len(self.fields_in_obj2_but_not_obj1) > 0:
            s += 'The following fields appear in %s but not %s:\n'%(self.obj2_name, self.obj1_name)
            for f in self.fields_in_obj2_but_not_obj1:
                s += '  %s\n'%f
        return s

class ValidationError(Exception):
    pass

def validate_ensembles(ensembles):
    """validate_ensembles(ensembles) -> None if all ensembles in the given
sequence have identical settings, input variables, and output variables. If any
ensemble has different settings or input/output variables, this function raises
an exception describing the discrepancy."""
    if len(ensembles) < 2:
        raise ValidationError("At least two ensembles needed!")
    e0 = ensembles[0]
    if not hasattr(e0, 'input'):
        raise ValidationError("Ensemble 0 has no input!")
    if not hasattr(e0, 'output'):
        raise ValidationError("Ensemble 0 has no output!")
    for i in range(1, len(ensembles)):
        ei = ensembles[i]

        # validate settings
        if hasattr(e0, 'settings') and not hasattr(ei, 'settings'):
            raise ValidationError("ensemble 0 has settings but ensemble %d doesn't!"%i)
        elif hasattr(ei, 'settings') and not hasattr(e0, 'settings'):
            raise ValidationError("ensemble %d has settings but ensemble 0 doesn't!"%i)
        diff = Diff('ensemble 0 settings', e0.settings,
                    'ensemble %d settings'%i, ei.settings)
        if not diff.empty():
            raise ValidationError(str(diff))

        # validate input
        if not hasattr(ei, 'input'):
            raise ValidationError("Ensemble %d has no input!"%i)
        diff = Diff('ensemble 0 input', e0.input,
                    'ensemble %d input'%i, ei.input)
        if not diff.empty():
            raise ValidationError(str(diff))

        # validate output
        if not hasattr(ei, 'output'):
            raise ValidationError("Ensemble %d has no output!"%i)
        diff = Diff('ensemble 0 output', e0.output,
                    'ensemble %d output'%i, ei.output)
        if not diff.empty():
            raise ValidationError(str(diff))

# This is our ensemble type.
class Object(object):
    pass

def merge_ensembles(ensembles):
    """merge_ensembles(ensembles) -> merged_ensemble"""
    merged = Object()
    e0 = ensembles[0]
    from copy import deepcopy

    # settings are identical for all ensembles, so just copy from e0
    if hasattr(e0, 'settings'):
        merged.settings = deepcopy(e0.settings)

    # copy input and output
    merged.input = deepcopy(e0.input)
    merged.output = deepcopy(e0.output)
    input_names = [name for name in dir(merged.input) if not name.startswith('_')]
    output_names = [name for name in dir(merged.output) if not name.startswith('_')]
    for ei in ensembles[1:]:
        for name in input_names:
            merged_inp = getattr(merged.input, name)
            inp_i = getattr(ei.input, name)
            setattr(merged.input, name, merged_inp + inp_i)
        for name in output_names:
            merged_outp = getattr(merged.output, name)
            outp_i = getattr(ei.output, name)
            setattr(merged.output, name, merged_outp + outp_i)
    return merged

def write_yaml(filename, ensemble):
    with open(filename, 'w') as f:
        f.write('# This file was automatically generated using the following command:\n')
        f.write('# %s\n\n'%' '.join(sys.argv))

        # settings
        if hasattr(ensemble, 'settings'):
            f.write('settings:\n')
            settings = ensemble.settings
            names = [name for name in dir(ensemble.settings) \
                     if not name.startswith('_')]
            for s in names:
                f.write('  %s: %s\n'%(s, getattr(settings, s)))
            f.write('\n')

        # input
        input_names = [name for name in dir(ensemble.input) if not name.startswith('_')]
        f.write('input:\n')
        f.write('  enumerated:\n') # all input is enumerated after merging
        for i in input_names:
            f.write('    %s: %s\n'%(i, getattr(ensemble.input, i)))

def write_py(filename, ensemble):
    with open(filename, 'w') as f:
        f.write('# This file was automatically generated using the following command:\n')
        f.write('# %s\n\n'%' '.join(sys.argv))
        f.write('from math import nan as nan, inf as inf\n\n')
        f.write('# Object is just a dynamic container that stores input/output data.\n')
        f.write('class Object(object):\n')
        f.write('    pass\n\n')

        # settings
        if hasattr(ensemble, 'settings'):
            f.write('# Settings are stored here.\n')
            f.write('settings = Object()\n')
            names = [name for name in dir(ensemble.settings) \
                      if not name.startswith('_')]
            for s in names:
                f.write('settings.%s = \'%s\'\n'%(s, getattr(ensemble.settings, s)))
        f.write('\n')

        # input
        f.write('# Input is stored here.\n')
        f.write('input = Object()\n')
        input_names = [name for name in dir(ensemble.input) if not name.startswith('_')]
        for i in input_names:
            f.write('input.%s = %s\n'%(i, getattr(ensemble.input, i)))
        f.write('\n')

        # output
        f.write('# Output data is stored here.\n')
        f.write('output = Object()\n')
        output_names = [name for name in dir(ensemble.output) if not name.startswith('_')]
        for o in output_names:
            f.write('output.%s = %s\n'%(o, getattr(ensemble.output, o)))

if __name__ == "__main__":
    if len(sys.argv) < 3:
        usage()
    else:
        # check filenames before we do anything
        for filename in sys.argv[1:]:
            if not filename.endswith('.py'):
                print("%s: invalid Python module: %s\n"%(sys.argv[0], filename))
                exit(1)
            elif not os.path.exists(filename):
                print("%s: file not found: %s\n"%(sys.argv[0], filename))

        # import all the data from the various ensembles
        import importlib
        ensembles = [importlib.import_module(filename.replace('.py', '')) \
                     for filename in sys.argv[1:]]

        # make sure all the ensembles have identical settings, inputs, outputs
        try:
            validate_ensembles(ensembles)
        except Exception as e:
            print("%s: %s\n"%(sys.argv[0], e))

        # merge them
        merged = merge_ensembles(ensembles)

        # write out .yaml input and .py output files for the merged ensemble
        write_yaml('merged.yaml', merged)
        write_py('merged.py', merged)
